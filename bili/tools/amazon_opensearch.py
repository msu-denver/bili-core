"""
Module: amazon_opensearch

This module provides functionality to interact with Amazon OpenSearch for performing
similarity searches. It includes functions to build and execute queries on an OpenSearch index
using embeddings generated by a user-defined function. The module also provides a utility to
initialize a Streamlit `Tool` for OpenSearch.

Functions:
    - build_query_opensearch(embedding_function, index_name, k=10, score_threshold=0.0, **kwargs):
      Creates a callable query function for performing similarity searches using OpenSearch.
    - init_amazon_opensearch(name, description, _embedding_function, index_name, **_kwargs):
      Initializes an Amazon OpenSearch `Tool` instance configured with the provided parameters.

Dependencies:
    - streamlit: Provides the Streamlit library for building web applications.
    - langchain.tools: Imports `Tool` for creating tools.
    - bili.utils.logging_utils: Imports `get_logger` for logging.
    - bili.utils.opensearch_utils: Imports `load_opensearch_vector_search` for OpenSearch
    vector search functionality.

Usage:
    This module is intended to be used within a Streamlit application to perform similarity
    searches on an OpenSearch index.
    It provides functions to build query functions and initialize tools for OpenSearch.

Example:
    from bili.tools.amazon_opensearch import init_amazon_opensearch

    # Initialize the OpenSearch tool
    opensearch_tool = init_amazon_opensearch(
        name="OpenSearch Tool",
        description="Tool for performing similarity searches on OpenSearch",
        _embedding_function=my_embedding_function,
        index_name="my_index"
    )
"""

from langchain.tools import Tool

from bili.streamlit_ui.utils.streamlit_utils import conditional_cache_resource
from bili.utils.logging_utils import get_logger
from bili.utils.opensearch_utils import load_opensearch_vector_search

# Initialize logger for this module
LOGGER = get_logger(__name__)


def build_query_opensearch(
    _embedding_function: callable,
    index_name: str,
    k: int = 10,
    score_threshold: float = 0.0,
    **_kwargs
) -> callable:
    """
    Builds a query function for performing similarity searches on an OpenSearch index.

    This function constructs a callable that can be used to query an OpenSearch
    index based on vector embeddings. It leverages the provided embedding function
    and additional configurations to create a function that executes similarity search
    queries and retrieves relevant neighbors from the index.

    :param _embedding_function: A callable used to generate embeddings for input
        strings.
    :param index_name: Name of the OpenSearch index on which similarity search queries
        will be performed.
    :param k: Number of nearest neighbors to retrieve during the similarity search.
        Default is 10.
    :param score_threshold: Minimum similarity score threshold for retrieved results.
        Only results with a score above this threshold are considered. Default is 0.0.
    :param _kwargs: Additional keyword arguments to be passed to the underlying
        OpenSearch similarity search function.
    :return: A callable that takes a query string and returns the top `k` search
        results as a list of text strings.
    :rtype: callable
    """
    docsearch = load_opensearch_vector_search(_embedding_function, index_name)

    def query_opensearch(query: str):
        """
        Executes a similarity search query on the configured OpenSearch index.

        This function converts the query string into an embedding before performing
        a similarity search. It then retrieves the top `k` nearest neighbors.

        :param query: The input query string to search for similar items.
        :type query: str
        :return: A list of search results containing the top `k` nearest neighbors.
        :rtype: list
        """
        LOGGER.debug(
            "Executing OpenSearch query {%s} for index {%s}", query, index_name
        )

        try:
            # Perform similarity search on the OpenSearch index
            results = docsearch.similarity_search(
                query, k=k, score_threshold=score_threshold, **_kwargs
            )

            # Convert results to a single string for processing by the LLM
            if isinstance(results, list):
                return " ".join([str(result) for result in results])
            return str(results)

        except Exception as e:
            LOGGER.error("OpenSearch query failed for index %s: %s", index_name, e)
            return ""

    return query_opensearch


@conditional_cache_resource()
def init_amazon_opensearch(
    name, description, _embedding_function, index_name, **_kwargs
) -> Tool:
    """
    Initialize an Amazon OpenSearch tool for performing search queries using an embedding
    function. This function sets up and returns a search tool encapsulating the necessary
    functionality, such as query execution against the specified OpenSearch index.

    :param name: Unique identifier for the tool.
    :type name: str
    :param description: A brief explanation of what the tool does.
    :type description: str
    :param _embedding_function: Function handling the embedding process for the query.
    :type _embedding_function: Callable
    :param index_name: Name of the OpenSearch index the tool interacts with.
    :type index_name: str
    :param _kwargs: Additional keyword arguments required for customization of the
        OpenSearch operation.
    :type _kwargs: dict
    :return: The initialized OpenSearch tool object configured with the provided parameters.
    :rtype: Tool
    """
    return Tool(
        name=name,
        func=build_query_opensearch(_embedding_function, index_name, **_kwargs),
        description=description,
    )
